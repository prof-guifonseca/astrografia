// Astrografia üåå ‚Äî Vers√£o Alinhada com Backend Flask
(() => {
  'use strict';

  const API = {
    generate: 'https://astrografia.onrender.com/api/astro/positions',
    interpretar: 'https://astrografia.onrender.com/api/interpretar',
    perspectiva: 'https://astrografia.onrender.com/api/perspectives'
  };

  const OPENCAGE_KEY = 'b639372a8f024a78b7ad0c15f4f5ea70';
  const $ = s => document.querySelector(s);

  /*
   * =============================
   *   Efem√©rides locais ü™ê
   *
   * Esta aplica√ß√£o originalmente dependia de chamadas a um backend e servi√ßos
   * externos para calcular posi√ß√µes planet√°rias e interpretar temas. Para
   * torn√°‚Äëla completamente funcional sem rede, implementamos abaixo um
   * conjunto de constantes e fun√ß√µes astrol√≥gicas simplificadas.
   *
   * As posi√ß√µes dos planetas s√£o estimadas a partir de valores m√©dios no
   * epoch J2000 (01/01/2000 √†s 12:00 UTC) e seus per√≠odos orbitais em dias.
   * A longitude geoc√™ntrica do Sol √© calculada como a posi√ß√£o da Terra
   * acrescida de 180¬∞, e o Ascendente √© aproximado em fun√ß√£o do hor√°rio
   * local (cada per√≠odo de 2h corresponde a um signo). Estas f√≥rmulas n√£o
   * substituem efem√©rides profissionais, mas fornecem resultados
   * coerentes para fins l√∫dicos e educativos.
   */

  // Nomes dos signos em portugu√™s na ordem zodiacal.
  const SIGNS_PT = [
    '√Åries', 'Touro', 'G√™meos', 'C√¢ncer', 'Le√£o', 'Virgem',
    'Libra', 'Escorpi√£o', 'Sagit√°rio', 'Capric√≥rnio', 'Aqu√°rio', 'Peixes'
  ];

  // Descri√ß√µes arquet√≠picas b√°sicas para cada signo. Estas palavras‚Äëchave
  // alimentam as interpreta√ß√µes tem√°ticas e podem ser ajustadas conforme
  // prefer√™ncia.
  const SIGN_INFO = {
    '√Åries': { traits: ['corajoso', 'impulsivo', 'independente', 'din√¢mico'] },
    'Touro': { traits: ['est√°vel', 'determinado', 'pr√°tico', 'sensual'] },
    'G√™meos': { traits: ['comunicativo', 'curioso', 'vers√°til', 'social'] },
    'C√¢ncer': { traits: ['emocional', 'protetor', 'nutritivo', 'sens√≠vel'] },
    'Le√£o': { traits: ['confiante', 'generoso', 'expressivo', 'criativo'] },
    'Virgem': { traits: ['anal√≠tico', 'organizado', 'detalhista', 'prudente'] },
    'Libra': { traits: ['harmonioso', 'soci√°vel', 'diplom√°tico', 'esteta'] },
    'Escorpi√£o': { traits: ['intenso', 'transformador', 'profundo', 'misterioso'] },
    'Sagit√°rio': { traits: ['aventureiro', 'otimista', 'filos√≥fico', 'expansivo'] },
    'Capric√≥rnio': { traits: ['disciplinado', 'ambicioso', 'pragm√°tico', 'respons√°vel'] },
    'Aqu√°rio': { traits: ['inovador', 'independente', 'vision√°rio', 'humanit√°rio'] },
    'Peixes': { traits: ['sens√≠vel', 'imaginativo', 'compassivo', 'm√≠stico'] }
  };

  // Defini√ß√µes dos planetas: per√≠odo orbital (dias), longitude m√©dia em J2000
  // (graus) e √≠cone representativo. As longitudes iniciais foram extra√≠das
  // de efem√©rides astron√¥micas e arredondadas para simplificar o c√°lculo.
  const PLANET_DEFS = [
    { name: 'Sun',     period: 365.256,   init: 280.460,    icon: '‚òÄÔ∏è' },
    { name: 'Moon',    period: 27.321582, init: 218.316,    icon: 'üåô' },
    { name: 'Mercury', period: 87.969,    init: 252.25084,  icon: '‚òøÔ∏è' },
    { name: 'Venus',   period: 224.701,   init: 181.97973,  icon: '‚ôÄÔ∏è' },
    { name: 'Mars',    period: 686.98,    init: 355.43300,  icon: '‚ôÇÔ∏è' },
    { name: 'Jupiter', period: 4332.59,   init: 34.35151,   icon: '‚ôÉ' },
    { name: 'Saturn',  period: 10759.22,  init: 50.07744,   icon: '‚ôÑ' },
    { name: 'Uranus',  period: 30685.4,   init: 314.05501,  icon: '‚ôÖ' },
    { name: 'Neptune', period: 60190.03,  init: 304.34866,  icon: '‚ôÜ' },
    { name: 'Pluto',   period: 90560,     init: 238.92903,  icon: '‚ôá' }
  ];

  /**
   * Calcula as posi√ß√µes planet√°rias e o ascendente de forma aproximada.
   *
   * @param {string} dateStr Data no formato YYYY-MM-DD
   * @param {string} timeStr Hora no formato HH:MM
   * @returns {{planets: Array, ascendant: Object}} Retorna objetos com
   *          propriedades name, sign, signDegree, degree e icon para cada
   *          planeta, bem como o ascendente com signo e grau.
   */
  function computeAstroData(dateStr, timeStr) {
    try {
      // Analisa data e hora fornecidas pelo usu√°rio. Consideramos o fuso
      // hor√°rio UTC para simplifica√ß√£o; para maior precis√£o seria
      // necess√°rio incluir a longitude e o fuso local.
      const [y, m, d] = (dateStr || '').split('-').map(Number);
      const [h, mi] = (timeStr || '').split(':').map(Number);
      const birth = new Date(Date.UTC(y, (m || 1) - 1, d || 1, h || 0, mi || 0, 0));
      // Epoch J2000: 1 de janeiro de 2000 √†s 12:00 UTC
      const epoch = new Date(Date.UTC(2000, 0, 1, 12, 0, 0));
      const days = (birth - epoch) / 86400000;

      // Calcula longitude m√©dia da Terra para determinar o Sol geoc√™ntrico.
      let earthLong = 100.46435 + (360 / 365.256) * days;
      earthLong = ((earthLong % 360) + 360) % 360;

      const planets = [];
      PLANET_DEFS.forEach(p => {
        let deg;
        if (p.name === 'Sun') {
          // O Sol, do ponto de vista terrestre, est√° sempre oposto √† Terra.
          deg = (earthLong + 180) % 360;
        } else {
          deg = p.init + (360 / p.period) * days;
          deg = ((deg % 360) + 360) % 360;
        }
        const signIndex = Math.floor(deg / 30);
        const sign = SIGNS_PT[signIndex];
        const signDegree = deg % 30;
        planets.push({
          name: p.name,
          sign: sign,
          signDegree: signDegree,
          degree: deg,
          icon: p.icon
        });
      });

      // Ascendente aproximado: divide o ciclo de 24h em 12 segmentos de 2h.
      const timeFraction = (((h || 0) + ((mi || 0) / 60)) / 24) % 1;
      const ascDeg = (timeFraction * 360) % 360;
      const ascSignIndex = Math.floor(ascDeg / 30);
      const ascSign = SIGNS_PT[ascSignIndex];

      return {
        planets: planets,
        ascendant: { sign: ascSign, degree: ascDeg % 30 }
      };
    } catch (err) {
      console.error('[Astrografia] Erro ao calcular mapa local:', err);
      return { planets: [], ascendant: null };
    }
  }

  const formEl = $('#astro-form');
  const nameEl = $('#name');
  const dateEl = $('#birthDate');
  const timeEl = $('#birthTime');
  const placeEl = $('#birthPlace');
  const resultSection = $('#result-section');
  const summaryEl = $('#summary');
  const chartEl = $('#chart-container');
  const reportEl = $('#report-container');
  const sectionBtns = document.querySelectorAll('.btn-section');
  const sectionGroup = $('#section-buttons');
  const perspectiveSec = $('#perspective-section');
  const perspectiveEl = $('#perspective-text');
  const submitPerspectiveBtn = $('#submit-perspective');
  const perspectiveResult = $('#perspective-result');

  let dadosGerados = null;

  const astroCache = localStorage.getItem('astroData');
  if (astroCache) {
    try {
      const parsed = JSON.parse(astroCache);
      if (parsed?.planets?.length && parsed?.ascendant) {
        dadosGerados = parsed;
        summaryEl.textContent = '‚ö° Dados carregados do cache.';
        resultSection.classList.remove('hidden');
        exibirPlanetas(parsed.planets, parsed.ascendant);
        sectionGroup?.classList.remove('hidden');
        perspectiveSec?.classList.remove('hidden');
      }
    } catch (e) {
      console.warn('[Astrografia] Falha ao ler cache:', e);
    }
  }

  async function obterCoordenadas(local) {
    const url = `https://api.opencagedata.com/geocode/v1/json?q=${encodeURIComponent(local)}&key=${OPENCAGE_KEY}&language=pt&limit=1`;
    try {
      const res = await fetch(url);
      const json = await res.json();
      return json?.results?.[0]?.geometry || null;
    } catch (err) {
      console.error('[Astrografia] Erro ao obter coordenadas:', err);
      return null;
    }
  }

  async function obterPosicoesPlanetarias(userData) {
    try {
      const res = await fetch(API.generate, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(userData)
      });
      if (!res.ok) throw new Error('Erro na requisi√ß√£o');
      return await res.json();
    } catch (err) {
      console.error('[Astrografia] Erro ao obter posi√ß√µes:', err);
      return { planets: [], ascendant: null };
    }
  }

  function exibirPlanetas(planets = [], ascendant = null) {
    chartEl.innerHTML = '<h3 class="fade-in">üî≠ Posi√ß√µes Celestes</h3>';

    if (!planets.length) {
      chartEl.innerHTML += '<p>‚ö†Ô∏è Nenhuma posi√ß√£o planet√°ria encontrada.</p>';
      return;
    }

    const ul = document.createElement('ul');
    ul.classList.add('report-html');

    if (ascendant?.sign) {
      ul.innerHTML += `<li>üåÖ Ascendente: <strong>${ascendant.sign}</strong> ${Number(ascendant.degree).toFixed(1)}¬∞</li>`;
    }

    planets.forEach(p => {
      const grau = typeof p.degree === 'number' ? `${p.degree.toFixed(1)}¬∞` : '?¬∞';
      ul.innerHTML += `<li>${p.icon || 'üîπ'} ${p.name}: ${p.sign} ${grau}</li>`;
    });

    chartEl.appendChild(ul);
  }

  formEl.addEventListener('submit', async (e) => {
    e.preventDefault();

    const name = nameEl.value.trim();
    const birthDate = dateEl.value;
    const birthTime = timeEl.value;
    const birthPlace = placeEl.value.trim();

    if (!name || !birthDate || !birthTime || !birthPlace) {
      alert('Por favor, preencha todos os campos.');
      return;
    }

    const btn = $('#generateMap');
    btn.disabled = true;
    btn.textContent = '‚åõ Gerando...';
    summaryEl.textContent = 'Calculando posi√ß√µes com alta precis√£o...';
    chartEl.innerHTML = '';
    reportEl.innerHTML = '';
    resultSection.classList.remove('hidden');

    // Calcula mapa natal localmente sem chamadas externas.
    const response = computeAstroData(birthDate, birthTime);
    dadosGerados = response;
    localStorage.setItem('astroData', JSON.stringify(response));
    summaryEl.textContent = '‚úÖ Mapa gerado com sucesso!';
    exibirPlanetas(response.planets, response.ascendant);
    sectionGroup?.classList.remove('hidden');
    perspectiveSec?.classList.remove('hidden');
    btn.disabled = false;
    btn.textContent = 'Gerar Mapa Astral';
  });

  document.addEventListener('click', async (e) => {
    const btn = e.target.closest('[data-topic]');
    if (!btn || !dadosGerados) return;

    const tema = btn.dataset.topic;
    const cacheKey = `astroInterpretacao:${tema}`;

    sectionBtns.forEach(b => b.classList.remove('btn-section--active'));
    btn.classList.add('btn-section--active');
    reportEl.innerHTML = '';

    const cached = localStorage.getItem(cacheKey);
    if (cached) {
      reportEl.innerHTML = cached;
      return;
    }

    btn.textContent = 'Gerando...';
    btn.disabled = true;

    // Fun√ß√£o local para interpretar cada tema com base nos arqu√©tipos.
    function interpretTheme(themeKey, data) {
      const planets = data.planets;
      const asc = data.ascendant;
      const getPlanet = (name) => planets.find(p => p.name === name);
      const html = [];
      switch (themeKey) {
        case 'amor': {
          const venus = getPlanet('Venus');
          const mars = getPlanet('Mars');
          const venTraits = SIGN_INFO[venus.sign].traits.slice(0, 2).join(' e ');
          const marsTraits = SIGN_INFO[mars.sign].traits.slice(0, 2).join(' e ');
          html.push(`<h4>‚ù§Ô∏è Amor e Relacionamentos</h4>`);
          html.push(`<p>Com V√™nus em <strong>${venus.sign}</strong> (${venus.signDegree.toFixed(1)}¬∞), voc√™ expressa o afeto de maneira ${venTraits}. V√™nus governa a forma como amamos e buscamos harmonia; este posicionamento revela como se conecta emocionalmente.</p>`);
          html.push(`<p>Marte em <strong>${mars.sign}</strong> (${mars.signDegree.toFixed(1)}¬∞) acrescenta uma energia ${marsTraits} aos seus desejos e iniciativas. Marte mostra como perseguimos o que queremos, inclusive nos relacionamentos.</p>`);
          html.push(`<p>Seu Ascendente em <strong>${asc.sign}</strong> (${asc.degree.toFixed(1)}¬∞) colore a maneira como voc√™ se apresenta e influencia as din√¢micas afetivas.</p>`);
          break;
        }
        case 'carreira': {
          const jup = getPlanet('Jupiter');
          const sat = getPlanet('Saturn');
          const jupTraits = SIGN_INFO[jup.sign].traits.slice(0, 2).join(' e ');
          const satTraits = SIGN_INFO[sat.sign].traits.slice(0, 2).join(' e ');
          html.push(`<h4>üíº Carreira e Prop√≥sito</h4>`);
          html.push(`<p>J√∫piter em <strong>${jup.sign}</strong> (${jup.signDegree.toFixed(1)}¬∞) sugere que suas oportunidades profissionais florescem quando voc√™ aposta em ${jupTraits}. J√∫piter expande aquilo em que tocamos; seu signo revela onde voc√™ busca crescimento.</p>`);
          html.push(`<p>Saturno em <strong>${sat.sign}</strong> (${sat.signDegree.toFixed(1)}¬∞) traz uma disciplina ${satTraits} √†s suas ambi√ß√µes. Saturno mostra onde precisamos trabalhar com persist√™ncia para conquistar resultados duradouros.</p>`);
          html.push(`<p>O Ascendente em <strong>${asc.sign}</strong> (${asc.degree.toFixed(1)}¬∞) indica a postura que voc√™ adota ao perseguir suas metas e como √© percebido no ambiente profissional.</p>`);
          break;
        }
        case 'familia': {
          const moon = getPlanet('Moon');
          const moonTraits = SIGN_INFO[moon.sign].traits.slice(0, 2).join(' e ');
          html.push(`<h4>üè† Fam√≠lia e Origens</h4>`);
          html.push(`<p>A Lua em <strong>${moon.sign}</strong> (${moon.signDegree.toFixed(1)}¬∞) reflete uma natureza emocional ${moonTraits}. Ela revela como voc√™ nutre e procura seguran√ßa; seu signo aponta para o tipo de v√≠nculo familiar que lhe conforta.</p>`);
          html.push(`<p>O Ascendente em <strong>${asc.sign}</strong> (${asc.degree.toFixed(1)}¬∞) mostra como voc√™ acolhe e protege aqueles ao seu redor, influenciando a forma como se expressa no lar.</p>`);
          break;
        }
        case 'espiritualidade': {
          const nep = getPlanet('Neptune');
          const nepTraits = SIGN_INFO[nep.sign].traits.slice(0, 2).join(' e ');
          html.push(`<h4>üßò Espiritualidade</h4>`);
          html.push(`<p>Netuno em <strong>${nep.sign}</strong> (${nep.signDegree.toFixed(1)}¬∞) aponta para uma conex√£o espiritual ${nepTraits}. Netuno rege sonhos e intui√ß√µes; seu signo indica por onde voc√™ se perde e se encontra no mist√©rio da vida.</p>`);
          html.push(`<p>O Ascendente em <strong>${asc.sign}</strong> (${asc.degree.toFixed(1)}¬∞) orienta a forma como voc√™ manifesta sua busca interior no cotidiano, trazendo sua espiritualidade para a pr√°tica.</p>`);
          break;
        }
        case 'missao': {
          const sun = getPlanet('Sun');
          const sunTraits = SIGN_INFO[sun.sign].traits.slice(0, 2).join(' e ');
          html.push(`<h4>üöÄ Miss√£o de Vida</h4>`);
          html.push(`<p>O Sol em <strong>${sun.sign}</strong> (${sun.signDegree.toFixed(1)}¬∞) revela uma ess√™ncia marcada por ${sunTraits}. O Sol representa nosso n√∫cleo e prop√≥sito; o seu signo indica onde voc√™ brilha e inspira.</p>`);
          html.push(`<p>O Ascendente em <strong>${asc.sign}</strong> (${asc.degree.toFixed(1)}¬∞) colore a express√£o dessa miss√£o, mostrando como voc√™ se coloca no mundo e direciona sua energia.</p>`);
          break;
        }
        case 'desafios': {
          const plut = getPlanet('Pluto');
          const mars = getPlanet('Mars');
          const plutTraits = SIGN_INFO[plut.sign].traits.slice(0, 2).join(' e ');
          const marsTraits2 = SIGN_INFO[mars.sign].traits.slice(0, 2).join(' e ');
          html.push(`<h4>‚öñÔ∏è Desafios Pessoais</h4>`);
          html.push(`<p>Plut√£o em <strong>${plut.sign}</strong> (${plut.signDegree.toFixed(1)}¬∞) fala de processos de ${plutTraits}. Este planeta mostra onde precisamos nos transformar profundamente.</p>`);
          html.push(`<p>Marte em <strong>${mars.sign}</strong> (${mars.signDegree.toFixed(1)}¬∞) apresenta desafios ligados √† ${marsTraits2}. Reconhecer a natureza de Marte ajuda a lidar melhor com impulsos e conflitos.</p>`);
          html.push(`<p>Seu Ascendente em <strong>${asc.sign}</strong> (${asc.degree.toFixed(1)}¬∞) ajuda a integrar essas for√ßas, apontando caminhos de crescimento.</p>`);
          break;
        }
        default: {
          html.push('<p>‚ö†Ô∏è Tema n√£o reconhecido.</p>');
        }
      }
      return html.join('');
    }

    const interpretation = interpretTheme(tema, dadosGerados);
    reportEl.innerHTML = interpretation;
    localStorage.setItem(cacheKey, interpretation);

    btn.textContent = '‚úîÔ∏è Interpretado';
    btn.disabled = true;
  });

  submitPerspectiveBtn?.addEventListener('click', async () => {
    const texto = perspectiveEl.value.trim();
    if (!texto) {
      alert('Por favor, escreva sua perspectiva pessoal.');
      return;
    }

    submitPerspectiveBtn.disabled = true;
    submitPerspectiveBtn.textContent = 'Enviando...';
    perspectiveResult.innerHTML = '';

    // Interpreta√ß√£o local da perspectiva sem chamadas externas
    function interpretPerspective(text, data) {
      const sun = data?.planets?.find(p => p.name === 'Sun');
      const asc = data?.ascendant;
      let msg = '<p><strong>Obrigado por compartilhar sua perspectiva.</strong></p>';
      if (sun && asc) {
        const traits = SIGN_INFO[sun.sign].traits.slice(0, 2).join(' e ');
        msg += `<p>Como nativo de <strong>${sun.sign}</strong>, sua ess√™ncia √© marcada por ${traits}. `;
        msg += `O Ascendente em <strong>${asc.sign}</strong> influencia a maneira como voc√™ encara situa√ß√µes presentes.</p>`;
      }
      if (text.length > 20) {
        msg += '<p>Sua mensagem revela profundidade e autenticidade. Use esse momento para reconectar-se com seus valores e confiar no processo. Cada experi√™ncia √© uma oportunidade de crescimento.</p>';
      } else {
        msg += '<p>Permita-se sentir e refletir. Pequenos pensamentos tamb√©m carregam verdades. Honre suas necessidades e siga em frente com gentileza.</p>';
      }
      return msg;
    }
    const mensagem = interpretPerspective(texto, dadosGerados || {});
    perspectiveResult.innerHTML = `<article class="report-html">${mensagem}</article>`;

    submitPerspectiveBtn.disabled = false;
    submitPerspectiveBtn.textContent = 'Interpretar Minha Perspectiva';
  });

})();
