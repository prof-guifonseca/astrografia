Contexto  
— Repositório: https://github.com/prof-guifonseca/astrografia (snapshot em anexo).  
— Objetivo: deixar a API **executável**, testada e pronta para deploy Render.

Tarefas

1. **Reestruturar pacotes**
   • Mova todo o código para `src/` conforme diagrama abaixo.  
   • Atualize todos os imports relativos para o novo caminho.  
   • Adote `create_app()` em `src/__init__.py` e um `app.py` enxuto.

2. **Configuração e variáveis**
   • Crie `config.py` (Dev/Test/Prod).  
   • Atualize `.env.example` com `DATABASE_URL`, `JWT_SECRET_KEY`, `KEPHEMERIS_PATH`.  
   • Garanta que o Dockerfile exporte `KEPHEMERIS_PATH=/app/ephe`.

3. **Blueprints e rotas**
   • Registre *todos* blueprints dentro do factory.  
   • Corrija URLs:  
     - `/api/auth/register`, `/login`, `/refresh`  
     - `/api/astro/positions`, `/api/perspectives`, `/api/interpret`, `/api/feedback`

4. **Banco de dados**
   • Integrar `Flask‑Migrate`; gerar primeira migration.  
   • Update nos modelos se necessário (campo `username` → `email`).

5. **Testes**
   • Ajustar fixtures para `email`.  
   • Garantir `pytest -q` roda sem falhas; cobertura ≥ 90 %.

6. **Efemérides & Kerykeion**
   • Copiar arquivos `.se1` para `/app/ephe` na imagem Docker.  
   • Definir `KEPHEMERIS_PATH` antes da criação do objeto `AstrologicalSubject`.  
   • Aplicar `functools.lru_cache` em função que lê efemérides.

7. **CORS & Segurança**
   • Limitar origens confiáveis em produção.  
   • Adicionar `flask-talisman` com CSP básico e HSTS.

8. **CI/CD**
   • Configurar GitHub Actions:  
     ```yaml
     - uses: actions/setup-python@v5
     - run: pip install -r requirements.txt
     - run: pytest
     ```
   • Falhar se coverage < 90 % ou testes quebrados.

9. **Documentação**
   • Atualizar `README.md` com ⚙️ setup, rotas e diagrama Mermaid.  
   • Incluir instruções de `docker-compose up --build`.

Critérios de aceite
✓ `docker compose up` expõe API funcional em `localhost:5000`.  
✓ `pytest` passa inteiro.  
✓ Latência `/api/astro/positions` < 1,5 s (cache habilitado).  
✓ Nenhuma chave secreta aparece em `git log -p`.  
✓ Deploy Render (`.render.yaml`) compila e sobe sem erro.

Entregável final  
Pull Request único com código reestruturado, migrations, CI verde, README revisado e instruções de frontend mínimo para login.

IMPORTANTE  
Manter a **precisão astrológica** (erro máximo 0 ° 01′) e documentar toda otimização aplicada.
